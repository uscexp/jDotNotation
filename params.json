{"name":"jDotNotation","tagline":"Java library to access class attributes via dot notation.","body":"# jDotNotation\r\n\r\n## Introduction\r\nJava library to access class attributes via dot notation.\r\n\r\n## News\r\n15.Aug.2014: New release [v1.1.0](https://github.com/uscexp/jDotNotation/releases/tag/v1.1.0) which adds the new map access feature.\r\n\r\n## Features\r\n* accessing simple attribues via dot notation.\r\n* accessing array/collection type attributes via index.\r\n* accessing attributes after array/collection type attributes without given index returns an array with all attribute values. e.g. `attrib1.arrayAttrib2.attrib3` - returns an array with all values of `attrib3`.\r\n* accessing map type attributes.\r\n\r\n## Description\r\nWith this library one can access values of attributes via a defined path from a root element.\r\nTo access an attrubute value use the dot notation:\r\n* `level1.level2.text` - accesses attrbute `level1` in root class, then accesses attribute `level2` in `level1` class and then accesses attrbute `text` in `level2` class.\r\n* `levels1.text` - accesses all `text` attributes in collection or array `levels1` (returns an array).\r\n* `levels1[0].text` - accesses attribute `text` in first (index 0) collection or array element of `levels1`.\r\n* `level1.texts[0]` - accessses first (index 0) element of collection or array or map attribute `texts`.\r\n* `level1.textMap['key']` - accessses element of map attribute `textMap` via simple key (string) access (argument with single quote).\r\n* `level1.textMap[your.domain.YourType(keyPart1, keyPart2)]` - accessses element of map attribute `textMap` via a constructor (with string arguments) which creates the key object to access the map (argument(s) without quotes).\r\n* `level1.textMap[your.domain.YourFactory#factoryMethod(keyPart1, keyPart2)]` - accessses element of map attribute `textMap` via a factory method (with string arguments) which creates the key object to access the map (argument(s) without quotes).\r\n\r\n**Attention!**\r\n\r\nAccessing collections e.g. HashSets via index doesn't make alway sense, because the order of the set isn't fix.\r\nSo if you set a value at index 0 and later you want to access it, it is very probable that you won't find it at index 0 anymore.\r\n\r\n## Example\r\n```java\r\n...\r\nDotNotationAccessor dotNotationAccessor = new DotNotationAccessor(true, false, false);\r\nRootClass rootClass = new RootClass();\r\nString attributePath = \"simpleChildLevel1Class.simpleChildLevel2Class.simpleChildLevel3Class.simpleString\";\r\n\r\nObject result = dotNotationAccessor.getAttribute(rootClass, attributePath);\r\n...\r\n```\r\nFirst it creates an instance of `DotNotationAccessor` only permitting accessing the attributes via getters and setters.\r\nThen it creates `RootClass` which has a more or less complex class hierarchy. Afterwards the attribute path, from the root class to the final attribute one want to read or set, is defined. Then it is called the `getAttribute` method in the `DotNotationAccessor` instance to read the attribute `simpleString` and save it in the result variable.\r\n\r\n## Installation\r\nTo use the library in your java project just put the binary jar file to your classpath.\r\nThe maven dependency can be found here: [mvnrepository](http://mvnrepository.com/artifact/com.github.uscexp/jDotNotation)\r\n\r\n(C) 2014 by haui","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}